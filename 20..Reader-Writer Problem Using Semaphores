#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t wrt;
pthread_mutex_t mutex;
int readcount = 0;
int shared_data = 0;

void* reader(void* arg) {
    int id = *(int*)arg;
    while (1) {
        pthread_mutex_lock(&mutex);
        readcount++;
        if (readcount == 1)
            sem_wait(&wrt); // first reader blocks writer
        pthread_mutex_unlock(&mutex);

        printf("Reader %d is reading: %d\n", id, shared_data);
        sleep(1);

        pthread_mutex_lock(&mutex);
        readcount--;
        if (readcount == 0)
            sem_post(&wrt); // last reader allows writer
        pthread_mutex_unlock(&mutex);
        sleep(2);
    }
    return NULL;
}

void* writer(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&wrt);
        shared_data++;
        printf("Writer %d is writing: %d\n", id, shared_data);
        sleep(2);
        sem_post(&wrt);
        sleep(2);
    }
    return NULL;
}

int main() {
    pthread_t r1, r2, w1;
    int r_id1 = 1, r_id2 = 2, w_id1 = 1;

    sem_init(&wrt, 0, 1);
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&r1, NULL, reader, &r_id1);
    pthread_create(&r2, NULL, reader, &r_id2);
    pthread_create(&w1, NULL, writer, &w_id1);

    pthread_join(r1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w1, NULL);

    sem_destroy(&wrt);
    pthread_mutex_destroy(&mutex);

    return 0;
}
